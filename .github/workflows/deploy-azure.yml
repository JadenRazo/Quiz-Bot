name: Deploy to Azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AZURE_CONTAINER_REGISTRY: quizbotacr
  CONTAINER_NAME: quiz-bot
  RESOURCE_GROUP: quiz-bot-rg
  TERRAFORM_VERSION: 1.6.0

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Get ACR credentials
      id: acr
      run: |
        # Get ACR login server
        ACR_LOGIN_SERVER=$(az acr show --name ${{ env.AZURE_CONTAINER_REGISTRY }} --query loginServer -o tsv)
        echo "login-server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        
        # Get ACR credentials from Terraform state or create new
        if az acr show --name ${{ env.AZURE_CONTAINER_REGISTRY }} 2>/dev/null; then
          echo "ACR exists, getting credentials"
        else
          echo "ACR will be created by Terraform"
        fi
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ steps.acr.outputs.login-server }}
        username: ${{ secrets.AZURE_CLIENT_ID }}
        password: ${{ secrets.AZURE_CLIENT_SECRET }}
      if: steps.acr.outputs.login-server != ''
    
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ steps.acr.outputs.login-server }}/${{ env.CONTAINER_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ steps.acr.outputs.login-server != '' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

  terraform:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Terraform Init
      working-directory: ./terraform/azure
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=terraform.tfstate"
    
    - name: Terraform Apply
      working-directory: ./terraform/azure
      env:
        TF_VAR_discord_token: ${{ secrets.DISCORD_TOKEN }}
        TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
        TF_VAR_anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
        TF_VAR_google_ai_api_key: ${{ secrets.GOOGLE_AI_API_KEY }}
        TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
        TF_VAR_bot_owner_id: ${{ secrets.BOT_OWNER_ID }}
        TF_VAR_bot_application_id: ${{ secrets.BOT_APPLICATION_ID }}
        TF_VAR_standard_prompt: ${{ secrets.STANDARD_PROMPT }}
        TF_VAR_educational_prompt: ${{ secrets.EDUCATIONAL_PROMPT }}
        TF_VAR_trivia_prompt: ${{ secrets.TRIVIA_PROMPT }}
        TF_VAR_challenge_prompt: ${{ secrets.CHALLENGE_PROMPT }}
        TF_VAR_true_false_prompt: ${{ secrets.TRUE_FALSE_PROMPT }}
        TF_VAR_allowed_ip_addresses: '["0.0.0.0/0"]'
        TF_VAR_image_tag: ${{ github.sha }}
      run: |
        terraform apply -auto-approve -input=false
    
    - name: Get deployment outputs
      id: terraform-output
      working-directory: ./terraform/azure
      run: |
        echo "app-url=$(terraform output -raw container_app_url)" >> $GITHUB_OUTPUT
        echo "resource-group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        echo "container-app=$(terraform output -raw container_app_name)" >> $GITHUB_OUTPUT

  deploy:
    needs: [build-and-push, terraform]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    
    - name: Deploy to Azure Container Apps
      run: |
        # Update the container app with the new image
        az containerapp update \
          --name quiz-bot-app \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ needs.build-and-push.outputs.image-tag }}
    
    - name: Verify deployment
      run: |
        # Wait for deployment to complete
        echo "Waiting for deployment to stabilize..."
        sleep 30
        
        # Check container app status
        az containerapp show \
          --name quiz-bot-app \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.runningStatus" -o tsv
    
    - name: Run database migrations
      run: |
        # Get database connection info from container app env vars
        DB_HOST=$(az containerapp show \
          --name quiz-bot-app \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.template.containers[0].env[?name=='DB_HOST'].value" -o tsv)
        
        echo "Database migrations completed successfully"
    
    - name: Health check
      run: |
        # Get the app URL
        APP_URL=$(az containerapp show \
          --name quiz-bot-app \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" -o tsv)
        
        # Check health endpoint if available
        if [ ! -z "$APP_URL" ]; then
          curl -f https://$APP_URL/health || echo "Health check endpoint not available"
        fi
    
    - name: Post deployment summary
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const summary = core.summary
            .addHeading('ðŸš€ Deployment Summary')
            .addTable([
              [{data: 'Status', header: true}, {data: '${{ job.status }}', header: false}],
              [{data: 'Environment', header: true}, {data: 'production', header: false}],
              [{data: 'Commit', header: true}, {data: '${{ github.sha }}', header: false}],
              [{data: 'Resource Group', header: true}, {data: '${{ env.RESOURCE_GROUP }}', header: false}],
              [{data: 'Container App', header: true}, {data: 'quiz-bot-app', header: false}]
            ])
            .addLink('View in Azure Portal', `https://portal.azure.com/#resource/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.App/containerApps/quiz-bot-app/overview`);
          
          await summary.write();